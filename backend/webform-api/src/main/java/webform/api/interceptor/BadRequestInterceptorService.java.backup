package webform.api.interceptor;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;

import javax.ws.rs.core.Context;

import org.aopalliance.intercept.ConstructorInterceptor;
import org.aopalliance.intercept.MethodInterceptor;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.glassfish.hk2.api.Filter;
import org.glassfish.hk2.api.InterceptionService;
import org.glassfish.hk2.utilities.BuilderHelper;

/**
 * {@link BadRequestInterceptor}のための{@link InterceptionService}
 */
public class BadRequestInterceptorService implements InterceptionService {
	/** Log */
	private Log log = LogFactory.getLog(getClass());

	@Context
	BadRequestInterceptor badRequestInterceptor;

	@Override
	public Filter getDescriptorFilter() {
		return BuilderHelper.allFilter();
	}

	@Override
	public List<MethodInterceptor> getMethodInterceptors(Method method) {

		Class<?> clazz = method.getDeclaringClass();
		String packageName = clazz.getPackage().getName();
		if (StringUtils.startsWith(packageName, "reqform.api.resource")) {
			if (log.isTraceEnabled()) {
				log.trace("packageName : " + packageName);
			}
			return Arrays.asList(this.badRequestInterceptor);
		}
		return null;
	}

	@Override
	public List<ConstructorInterceptor> getConstructorInterceptors(Constructor<?> constructor) {
		return null;
	}
}
